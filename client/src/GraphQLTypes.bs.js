// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.js";

var Graphql_Verify = Caml_exceptions.create("GraphQLTypes.Graphql_Verify");

var Graphql_Missing_Field = Caml_exceptions.create("GraphQLTypes.Graphql_Missing_Field");

var Graphql_Bad_Enum_Value = Caml_exceptions.create("GraphQLTypes.Graphql_Bad_Enum_Value");

function verifyGraphQLType(typename, json) {
  var root = Js_json.decodeObject(json);
  if (root !== undefined) {
    var root$1 = Caml_option.valFromOption(root);
    if (typename === "Query" || typename === "Mutation") {
      return root$1;
    }
    var name = Js_dict.get(root$1, "__typename");
    if (name !== undefined) {
      var name$1 = Js_json.decodeString(Caml_option.valFromOption(name));
      if (name$1 !== undefined && name$1 === typename) {
        return root$1;
      }
      throw {
            RE_EXN_ID: Graphql_Verify,
            _1: "Provided object is not " + typename + " type",
            Error: new Error()
          };
    }
    throw {
          RE_EXN_ID: Graphql_Verify,
          _1: "Provided object is not a GraphQL object",
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: Graphql_Verify,
        _1: "Unable to decode " + typename + " object",
        Error: new Error()
      };
}

function getField(fieldName, typename, data) {
  var result = Js_dict.get(verifyGraphQLType(typename, data), fieldName);
  if (result !== undefined) {
    return Caml_option.valFromOption(result);
  }
  throw {
        RE_EXN_ID: Graphql_Missing_Field,
        _1: "Field " + fieldName + " was not present on provided " + typename + " object. Did you forget to fetch it?",
        Error: new Error()
      };
}

function getNullableField(fieldName, typename, data) {
  var result = Js_dict.get(verifyGraphQLType(typename, data), fieldName);
  if (result !== undefined) {
    var result$1 = Caml_option.valFromOption(result);
    if (result$1 === null) {
      return ;
    } else {
      return Caml_option.some(result$1);
    }
  }
  throw {
        RE_EXN_ID: Graphql_Missing_Field,
        _1: "Field " + fieldName + " was not present on provided " + typename + " object. Did you forget to fetch it?",
        Error: new Error()
      };
}

function getArray(typename, fieldName, decoderOpt, data) {
  var decoder = decoderOpt !== undefined ? decoderOpt : (function (prim) {
        return prim;
      });
  var arr = getField(fieldName, typename, data);
  return Belt_Array.map(arr, Curry.__1(decoder));
}

function getNullableArray(typename, fieldName, decoderOpt, data) {
  var decoder = decoderOpt !== undefined ? decoderOpt : (function (prim) {
        return prim;
      });
  var arr = getField(fieldName, typename, data);
  if (arr === null) {
    return ;
  } else {
    return Belt_Array.map(arr, decoder);
  }
}

function makeDecoder(typename, fieldName, decoder, json) {
  return Belt_Option.getExn(Curry._1(decoder, getField(fieldName, typename, json)));
}

function makeNullableDecoder(typename, fieldName, decoder, json) {
  var value = getField(fieldName, typename, json);
  var value$1 = Curry._1(decoder, value);
  if (value$1 !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(value$1));
  }
  if (value === null) {
    return ;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function decodeInt(json) {
  return Belt_Option.map(Js_json.decodeNumber(json), (function (prim) {
                return prim | 0;
              }));
}

function getString(param) {
  return function (param$1) {
    return function (param$2) {
      var param$3 = Js_json.decodeString;
      return makeDecoder(param, param$1, param$3, param$2);
    };
  };
}

function getNullableString(param) {
  return function (param$1) {
    return function (param$2) {
      var param$3 = Js_json.decodeString;
      return makeNullableDecoder(param, param$1, param$3, param$2);
    };
  };
}

function getFloat(param) {
  return function (param$1) {
    return function (param$2) {
      var param$3 = Js_json.decodeNumber;
      return makeDecoder(param, param$1, param$3, param$2);
    };
  };
}

function getNullableFloat(param) {
  return function (param$1) {
    return function (param$2) {
      var param$3 = Js_json.decodeNumber;
      return makeNullableDecoder(param, param$1, param$3, param$2);
    };
  };
}

function getInt(param) {
  return function (param$1) {
    return function (param$2) {
      return makeDecoder(param, param$1, decodeInt, param$2);
    };
  };
}

function getNullableInt(param) {
  return function (param$1) {
    return function (param$2) {
      return makeNullableDecoder(param, param$1, decodeInt, param$2);
    };
  };
}

function getBool(param) {
  return function (param$1) {
    return function (param$2) {
      var param$3 = Js_json.decodeBoolean;
      return makeDecoder(param, param$1, param$3, param$2);
    };
  };
}

function getNullableBool(param) {
  return function (param$1) {
    return function (param$2) {
      var param$3 = Js_json.decodeBoolean;
      return makeNullableDecoder(param, param$1, param$3, param$2);
    };
  };
}

function decodeEnum(typename, fieldName, decoder, data) {
  var str = Js_json.decodeString(data);
  if (str !== undefined) {
    var value = Curry._1(decoder, str);
    if (value !== undefined) {
      return Caml_option.valFromOption(value);
    }
    throw {
          RE_EXN_ID: Graphql_Bad_Enum_Value,
          _1: "Unknown enum value " + str + " was provided for field " + fieldName + " on " + typename,
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function getEnum(typename, fieldName, decoder, json) {
  var str = Curry._1(getString(typename)(fieldName), json);
  var value = Curry._1(decoder, str);
  if (value !== undefined) {
    return Caml_option.valFromOption(value);
  }
  throw {
        RE_EXN_ID: Graphql_Bad_Enum_Value,
        _1: "Unknown enum value " + str + " was provided for field " + fieldName + " on " + typename,
        Error: new Error()
      };
}

function getNullableEnum(typename, fieldName, decoder, json) {
  var str = Curry._1(getNullableString(typename)(fieldName), json);
  return Belt_Option.map(str, (function (value) {
                var value$1 = Curry._1(decoder, value);
                if (value$1 !== undefined) {
                  return Caml_option.valFromOption(value$1);
                }
                throw {
                      RE_EXN_ID: Graphql_Bad_Enum_Value,
                      _1: "Unknown enum value " + str + " was provided for field " + fieldName + " on " + typename,
                      Error: new Error()
                    };
              }));
}

var typename = "Antibody";

var id = getString(typename)("id");

var name = getString(typename)("name");

var version = getString(typename)("version");

function bindsTo(eta) {
  var param;
  return getArray(typename, "bindsTo", param, eta);
}

var expiresInSeconds = getFloat(typename)("expiresInSeconds");

var Antibody = {
  typename: typename,
  id: id,
  name: name,
  version: version,
  bindsTo: bindsTo,
  expiresInSeconds: expiresInSeconds
};

var typename$1 = "Citizen";

var id$1 = getString(typename$1)("id");

function infections(eta) {
  var param;
  return getArray(typename$1, "infections", param, eta);
}

function vaccinations(eta) {
  var param;
  return getArray(typename$1, "vaccinations", param, eta);
}

function immunities(eta) {
  var param;
  return getArray(typename$1, "immunities", param, eta);
}

var Citizen = {
  typename: typename$1,
  id: id$1,
  infections: infections,
  vaccinations: vaccinations,
  immunities: immunities
};

var typename$2 = "Immunity";

function antibody(param) {
  return getField("antibody", typename$2, param);
}

var expiresAt = getString(typename$2)("expiresAt");

var Immunity = {
  typename: typename$2,
  antibody: antibody,
  expiresAt: expiresAt
};

var typename$3 = "Infection";

function pathogen(param) {
  return getField("pathogen", typename$3, param);
}

var infectedAt = getString(typename$3)("infectedAt");

var Infection = {
  typename: typename$3,
  pathogen: pathogen,
  infectedAt: infectedAt
};

var typename$4 = "Mutation";

function reportNeighbors(eta) {
  var param;
  return getArray(typename$4, "reportNeighbors", param, eta);
}

function vaccinate(param) {
  return getNullableField("vaccinate", typename$4, param);
}

var Mutation = {
  typename: typename$4,
  reportNeighbors: reportNeighbors,
  vaccinate: vaccinate
};

var typename$5 = "Pathogen";

var id$2 = getString(typename$5)("id");

var name$1 = getString(typename$5)("name");

var version$1 = getString(typename$5)("version");

var spreadDistanceInMeters = getFloat(typename$5)("spreadDistanceInMeters");

var spreadTimeInSeconds = getFloat(typename$5)("spreadTimeInSeconds");

var spreadRatio = getFloat(typename$5)("spreadRatio");

var Pathogen = {
  typename: typename$5,
  id: id$2,
  name: name$1,
  version: version$1,
  spreadDistanceInMeters: spreadDistanceInMeters,
  spreadTimeInSeconds: spreadTimeInSeconds,
  spreadRatio: spreadRatio
};

var typename$6 = "Query";

function allCitizens(eta) {
  var param;
  return getArray(typename$6, "allCitizens", param, eta);
}

function citizen(param) {
  return getNullableField("citizen", typename$6, param);
}

function allPathogens(eta) {
  var param;
  return getArray(typename$6, "allPathogens", param, eta);
}

function allVaccines(eta) {
  var param;
  return getArray(typename$6, "allVaccines", param, eta);
}

function allAntibodies(eta) {
  var param;
  return getArray(typename$6, "allAntibodies", param, eta);
}

var Query = {
  typename: typename$6,
  allCitizens: allCitizens,
  citizen: citizen,
  allPathogens: allPathogens,
  allVaccines: allVaccines,
  allAntibodies: allAntibodies
};

var typename$7 = "Vaccination";

function vaccine(param) {
  return getField("vaccine", typename$7, param);
}

var adminedAt = getString(typename$7)("adminedAt");

var Vaccination = {
  typename: typename$7,
  vaccine: vaccine,
  adminedAt: adminedAt
};

var typename$8 = "Vaccine";

var id$3 = getString(typename$8)("id");

var name$2 = getString(typename$8)("name");

var version$2 = getString(typename$8)("version");

function generates(param) {
  return getField("generates", typename$8, param);
}

var effectiveAfterSeconds = getFloat(typename$8)("effectiveAfterSeconds");

var Vaccine = {
  typename: typename$8,
  id: id$3,
  name: name$2,
  version: version$2,
  generates: generates,
  effectiveAfterSeconds: effectiveAfterSeconds
};

function make(citizen, distanceInMeters, measuredAt, param) {
  return {
          citizen: citizen,
          distanceInMeters: distanceInMeters,
          measuredAt: measuredAt
        };
}

var ProximityObservation = {
  make: make
};

export {
  Graphql_Verify ,
  Graphql_Missing_Field ,
  Graphql_Bad_Enum_Value ,
  verifyGraphQLType ,
  getField ,
  getNullableField ,
  getArray ,
  getNullableArray ,
  makeDecoder ,
  makeNullableDecoder ,
  decodeInt ,
  getString ,
  getNullableString ,
  getFloat ,
  getNullableFloat ,
  getInt ,
  getNullableInt ,
  getBool ,
  getNullableBool ,
  decodeEnum ,
  getEnum ,
  getNullableEnum ,
  Antibody ,
  Citizen ,
  Immunity ,
  Infection ,
  Mutation ,
  Pathogen ,
  Query ,
  Vaccination ,
  Vaccine ,
  ProximityObservation ,
  
}
/* id Not a pure module */
