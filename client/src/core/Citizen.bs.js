// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Decco from "decco/src/Decco.bs.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Immunity from "./Immunity.bs.js";
import * as Infection from "./Infection.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Vaccination from "./Vaccination.bs.js";

function t_encode(v) {
  return Js_dict.fromArray([
              [
                "id",
                Decco.stringToJson(v.id)
              ],
              [
                "infections",
                Decco.arrayToJson(Infection.t_encode, v.infections)
              ],
              [
                "vaccinations",
                Decco.arrayToJson(Vaccination.t_encode, v.vaccinations)
              ],
              [
                "immunities",
                Decco.arrayToJson(Immunity.t_encode, v.immunities)
              ]
            ]);
}

function t_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var infections = Decco.arrayFromJson(Infection.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "infections"), null));
    if (infections.TAG === /* Ok */0) {
      var vaccinations = Decco.arrayFromJson(Vaccination.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "vaccinations"), null));
      if (vaccinations.TAG === /* Ok */0) {
        var immunities = Decco.arrayFromJson(Immunity.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "immunities"), null));
        if (immunities.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    id: id._0,
                    infections: infections._0,
                    vaccinations: vaccinations._0,
                    immunities: immunities._0
                  }
                };
        }
        var e = immunities._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".immunities" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = vaccinations._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".vaccinations" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = infections._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".infections" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function one(id) {
  return Belt_Option.getExn(JSON.stringify({
                  query: "\n    {\n      citizen(id: \"" + id + "\") {\n        id\n        infections { pathogen { name, spreadDistanceInMeters }, infectedAt }\n        vaccinations { vaccine { name }, adminedAt }\n        immunities { antibody { name, bindsTo { name, spreadDistanceInMeters } } expiresAt }\n      }\n    }\n    "
                }));
}

function one_encode(v) {
  return Js_dict.fromArray([[
                "citizen",
                t_encode(v.citizen)
              ]]);
}

function one_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var citizen = t_decode(Belt_Option.getWithDefault(Js_dict.get(dict._0, "citizen"), null));
  if (citizen.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              citizen: citizen._0
            }
          };
  }
  var e = citizen._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".citizen" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

function one_result_encode(v) {
  return Js_dict.fromArray([[
                "data",
                one_encode(v.data)
              ]]);
}

function one_result_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var data = one_decode(Belt_Option.getWithDefault(Js_dict.get(dict._0, "data"), null));
  if (data.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              data: data._0
            }
          };
  }
  var e = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

function all(param) {
  return Belt_Option.getExn(JSON.stringify({
                  query: "\n    {\n      allCitizens {\n        id\n        infections { pathogen { name, spreadDistanceInMeters }, infectedAt }\n        vaccinations { vaccine { name }, adminedAt }\n        immunities { antibody { name, bindsTo { name, spreadDistanceInMeters } } expiresAt }\n      }\n    }\n  "
                }));
}

function all_encode(v) {
  return Js_dict.fromArray([[
                "allCitizens",
                Decco.arrayToJson(t_encode, v.allCitizens)
              ]]);
}

function all_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var allCitizens = Decco.arrayFromJson(t_decode, Belt_Option.getWithDefault(Js_dict.get(dict._0, "allCitizens"), null));
  if (allCitizens.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              allCitizens: allCitizens._0
            }
          };
  }
  var e = allCitizens._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".allCitizens" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

function all_result_encode(v) {
  return Js_dict.fromArray([[
                "data",
                all_encode(v.data)
              ]]);
}

function all_result_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var data = all_decode(Belt_Option.getWithDefault(Js_dict.get(dict._0, "data"), null));
  if (data.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              data: data._0
            }
          };
  }
  var e = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

function toString(user) {
  return Belt_Option.getExn(JSON.stringify(user));
}

function fromString(prim) {
  return JSON.parse(prim);
}

export {
  t_encode ,
  t_decode ,
  one ,
  one_encode ,
  one_decode ,
  one_result_encode ,
  one_result_decode ,
  all ,
  all_encode ,
  all_decode ,
  all_result_encode ,
  all_result_decode ,
  toString ,
  fromString ,
  
}
/* No side effect */
