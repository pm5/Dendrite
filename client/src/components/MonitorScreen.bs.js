// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Async from "../Async.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Monitor from "../Monitor.bs.js";
import * as $$Storage from "../Storage.bs.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as ScreenStyle from "../styles/ScreenStyle.bs.js";
import * as ReactNative from "react-native";
import * as StateProvider from "../StateProvider.bs.js";

function reset(setAppState) {
  Async.then_(Async.then_($$Storage.resetBeacon(undefined), (function (param) {
              return $$Storage.resetUser(undefined);
            })), (function (param) {
          return Async.async(Curry._1(setAppState, (function (param) {
                            return /* Start */0;
                          })));
        }));
  
}

function MonitorScreen$WarnScreen(Props) {
  var neighbor = Props.neighbor;
  return React.createElement(ReactNative.View, {
              style: ScreenStyle.styles.background,
              children: Belt_Option.getWithDefault(Belt_Option.map(Belt_Array.get(neighbor.citizen.photo, 0), (function (photo) {
                          return React.createElement(ReactNative.Image, {
                                      resizeMode: "cover",
                                      source: {
                                        uri: photo.thumbnail.url
                                      },
                                      style: {
                                        height: photo.thumbnail.height,
                                        width: photo.thumbnail.width
                                      }
                                    });
                        })), null)
            });
}

var WarnScreen = {
  make: MonitorScreen$WarnScreen
};

function MonitorScreen(Props) {
  var user = Props.user;
  var match = StateProvider.useContext(undefined);
  var setAppState = match[1];
  var match$1 = Monitor.useMonitor(user);
  var danger = match$1[1];
  return React.createElement(React.Fragment, undefined, danger !== undefined ? React.createElement(MonitorScreen$WarnScreen, {
                    neighbor: danger[0],
                    pathogen: danger[1]
                  }) : React.createElement(ReactNative.View, {
                    style: ScreenStyle.styles.background,
                    children: null
                  }, React.createElement(ReactNative.Text, {
                        children: Belt_Option.getWithDefault(Belt_Option.map(match$1[0], (function (neighbors) {
                                    return String(neighbors.length) + " neighbors";
                                  })), "No results yet")
                      }), React.createElement(ReactNative.Text, {
                        children: "No danger"
                      }), React.createElement(ReactNative.Button, {
                        onPress: (function (param) {
                            return reset(setAppState);
                          }),
                        title: "Reset"
                      })));
}

var make = MonitorScreen;

export {
  reset ,
  WarnScreen ,
  make ,
  
}
/* react Not a pure module */
