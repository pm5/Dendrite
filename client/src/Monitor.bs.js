// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Db from "./Db.bs.js";
import * as Async from "./Async.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Beacon from "./core/Beacon.bs.js";
import * as Neighbor from "./core/Neighbor.bs.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as BeaconScanner from "./BeaconScanner.bs.js";
import * as Belt_HashMapString from "bs-platform/lib/es6/belt_HashMapString.js";

function useNeighbors(param) {
  var match = React.useState(function () {
        return Belt_HashMapString.make(30);
      });
  var setAllCitizens = match[1];
  var allCitizens = match[0];
  var match$1 = BeaconScanner.useScanner(undefined);
  var setScanning = match$1[2];
  var beacons = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setNeighbors = match$2[1];
  React.useEffect((function () {
          Async.$$catch(Async.then_(Db.allCitizens(undefined), (function (citizens) {
                      return Async.async(Curry._1(setAllCitizens, (function (param) {
                                        return Belt_HashMapString.fromArray(Belt_Array.map(citizens, (function (citizen) {
                                                          return [
                                                                  citizen.id,
                                                                  citizen
                                                                ];
                                                        })));
                                      })));
                    })), (function (err) {
                  return Async.async((console.log(err), undefined));
                }));
          
        }), [beacons]);
  React.useEffect((function () {
          Curry._1(setNeighbors, (function (param) {
                  return Belt_Array.keepMap(beacons, (function (beacon) {
                                return Belt_Option.map(Belt_HashMapString.get(allCitizens, Beacon.toCitizenId(beacon)), (function (citizen) {
                                              return {
                                                      citizen: citizen,
                                                      distanceInMeters: beacon.distance,
                                                      measuredAt: new Date()
                                                    };
                                            }));
                              }));
                }));
          
        }), [
        allCitizens,
        beacons
      ]);
  React.useEffect((function () {
          Curry._1(setScanning, (function (param) {
                  return true;
                }));
          return (function (param) {
                    return Curry._1(setScanning, (function (param) {
                                  return false;
                                }));
                  });
        }), []);
  return match$2[0];
}

function useMonitor(user) {
  var neighbors = useNeighbors(undefined);
  var match = React.useState(function () {
        
      });
  var setDanger = match[1];
  React.useEffect((function () {
          Belt_Option.map(neighbors, (function (neighbors) {
                  var dangers = Neighbor.dangeredBy(user, neighbors);
                  if (dangers.length !== 0) {
                    console.log(Belt_Array.get(dangers, 0));
                    return Curry._1(setDanger, (function (param) {
                                  return Belt_Array.get(dangers, 0);
                                }));
                  }
                  
                }));
          return (function (param) {
                    return Curry._1(setDanger, (function (param) {
                                  
                                }));
                  });
        }), [neighbors]);
  return [
          neighbors,
          match[0],
          setDanger
        ];
}

export {
  useNeighbors ,
  useMonitor ,
  
}
/* react Not a pure module */
