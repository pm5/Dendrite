// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Async from "./Async.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as $$Storage from "./Storage.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as ReactNative from "react-native";
import * as StateProvider from "./StateProvider.bs.js";
import * as LoadUserScreen from "./components/LoadUserScreen.bs.js";
import * as PairBeaconScreen from "./components/PairBeaconScreen.bs.js";

function App$StartScreen(Props) {
  var match = React.useContext(StateProvider.stateContext);
  var setAppState = match[1];
  return React.createElement(React.Fragment, undefined, React.createElement(ReactNative.View, {
                  children: null
                }, React.createElement(ReactNative.Text, {
                      children: "Start Screen"
                    }), React.createElement(ReactNative.Button, {
                      onPress: (function (param) {
                          return Curry._1(setAppState, (function (param) {
                                        return /* ScanningBeacon */1;
                                      }));
                        }),
                      title: "No beacon paired"
                    }), React.createElement(ReactNative.Button, {
                      onPress: (function (param) {
                          return Curry._1(setAppState, (function (param) {
                                        return StateProvider.take(/* LoadUser */2, param);
                                      }));
                        }),
                      title: "No user"
                    }), React.createElement(ReactNative.Button, {
                      onPress: (function (param) {
                          return Curry._1(setAppState, (function (param) {
                                        return /* Initializing */2;
                                      }));
                        }),
                      title: "All good to go"
                    }), React.createElement(ReactNative.Button, {
                      onPress: (function (param) {
                          
                        }),
                      title: "Clear beacon data"
                    })));
}

var StartScreen = {
  make: App$StartScreen
};

function App$MonitorScreen(Props) {
  var match = React.useContext(StateProvider.stateContext);
  var setAppState = match[1];
  return React.createElement(React.Fragment, undefined, React.createElement(ReactNative.View, {
                  children: null
                }, React.createElement(ReactNative.Text, {
                      children: "Monitor"
                    }), React.createElement(ReactNative.Button, {
                      onPress: (function (param) {
                          return Curry._1(setAppState, (function (param) {
                                        return /* NearbyUserDetected */3;
                                      }));
                        }),
                      title: "Nearby found"
                    }), React.createElement(ReactNative.Button, {
                      onPress: (function (param) {
                          return Curry._1(setAppState, (function (param) {
                                        return /* WarningUser */5;
                                      }));
                        }),
                      title: "Danger found"
                    })));
}

var MonitorScreen = {
  make: App$MonitorScreen
};

function App$WarnScreen(Props) {
  React.useContext(StateProvider.stateContext);
  return React.createElement(React.Fragment, undefined, React.createElement(ReactNative.View, {
                  children: React.createElement(ReactNative.Text, {
                        children: "Warning!"
                      })
                }));
}

var WarnScreen = {
  make: App$WarnScreen
};

function App$AppView(Props) {
  var match = React.useContext(StateProvider.stateContext);
  var state = match[0];
  var tmp;
  var exit = 0;
  if (typeof state === "number") {
    switch (state) {
      case /* Start */0 :
          tmp = React.createElement(App$StartScreen, {});
          break;
      case /* ScanningBeacon */1 :
          exit = 2;
          break;
      case /* WarningUser */5 :
          tmp = React.createElement(App$WarnScreen, {});
          break;
      default:
        throw {
              RE_EXN_ID: "Match_failure",
              _1: [
                "App.res",
                74,
                7
              ],
              Error: new Error()
            };
    }
  } else {
    switch (state.TAG | 0) {
      case /* BeaconPaired */0 :
      case /* BeaconSaved */2 :
          exit = 2;
          break;
      case /* UserLoaded */1 :
      case /* LoadingUser */3 :
          exit = 1;
          break;
      case /* Monitoring */4 :
          tmp = React.createElement(App$MonitorScreen, {
                beacon: state._0,
                user: state._1
              });
          break;
      
    }
  }
  switch (exit) {
    case 1 :
        tmp = React.createElement(LoadUserScreen.make, {
              beacon: state._0
            });
        break;
    case 2 :
        tmp = React.createElement(PairBeaconScreen.make, {});
        break;
    
  }
  return React.createElement(React.Fragment, undefined, tmp);
}

var AppView = {
  make: App$AppView
};

function App$app(Props) {
  var match = React.useState(function () {
        return /* Start */0;
      });
  var setAppState = match[1];
  var appState = match[0];
  Async.then_($$Storage.loadBeacon(undefined), (function (b) {
          return Async.async(Belt_Option.map(b, (function (beacon) {
                            console.log(beacon.id);
                            
                          })));
        }));
  React.useEffect((function () {
          if (typeof appState !== "number") {
            switch (appState.TAG | 0) {
              case /* BeaconPaired */0 :
                  Curry._1(setAppState, (function (param) {
                          return StateProvider.take(/* LoadUser */2, param);
                        }));
                  break;
              case /* UserLoaded */1 :
                  Curry._1(setAppState, (function (param) {
                          return StateProvider.take(/* StartMonitor */3, param);
                        }));
                  break;
              default:
                
            }
          }
          
        }), [appState]);
  return React.createElement(React.Fragment, undefined, React.createElement(StateProvider.make, StateProvider.makeProps([
                      appState,
                      setAppState
                    ], React.createElement(App$AppView, {}), undefined)));
}

var app = App$app;

export {
  StartScreen ,
  MonitorScreen ,
  WarnScreen ,
  AppView ,
  app ,
  
}
/* react Not a pure module */
