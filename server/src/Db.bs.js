// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");

require('isomorphic-fetch')
;

function make(endpoint, api_key) {
  return {
          endpoint: endpoint,
          api_key: api_key
        };
}

function table_url(airtable, table, filter, param) {
  return airtable.endpoint + "/" + table + (
          filter !== undefined ? "?filterByFormula=" + filter : ""
        );
}

function record_url(airtable, table, record) {
  return airtable.endpoint + "/" + table + "/" + record;
}

var Airtable = {
  make: make,
  table_url: table_url,
  record_url: record_url
};

function headers(airtable) {
  return Fetch.RequestInit.make(undefined, {
                Authorization: "Bearer " + airtable.api_key
              }, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined);
}

function pathogen(param) {
  return Json_decode.field("fields", (function (json) {
                return {
                        name: Json_decode.field("name", Json_decode.string, json),
                        version: Json_decode.field("version", Json_decode.string, json),
                        spreadDistanceInMeters: Json_decode.field("spreadDistanceInMeters", Json_decode.$$float, json),
                        spreadTimeInSeconds: Json_decode.field("spreadTimeInSeconds", Json_decode.$$float, json),
                        spreadRatio: Json_decode.field("spreadRatio", Json_decode.$$float, json)
                      };
              }), param);
}

function pathogens(param) {
  return Json_decode.field("records", (function (param) {
                return Json_decode.array(pathogen, param);
              }), param);
}

function vaccine(param) {
  return Json_decode.field("fields", (function (json) {
                return {
                        name: Json_decode.field("name", Json_decode.string, json),
                        version: Json_decode.field("version", Json_decode.string, json),
                        generates: Belt_Array.getExn(Json_decode.field("generates", (function (param) {
                                    return Json_decode.array(Json_decode.string, param);
                                  }), json), 0),
                        effectiveAfterSeconds: Json_decode.field("effectiveAfterSeconds", Json_decode.$$float, json)
                      };
              }), param);
}

function vaccines(param) {
  return Json_decode.field("records", (function (param) {
                return Json_decode.array(vaccine, param);
              }), param);
}

function antibody(param) {
  return Json_decode.field("fields", (function (json) {
                return {
                        name: Json_decode.field("name", Json_decode.string, json),
                        version: Json_decode.field("version", Json_decode.string, json),
                        bindsTo: Json_decode.field("bindsTo", (function (param) {
                                return Json_decode.array(Json_decode.string, param);
                              }), json),
                        expiresInSeconds: Json_decode.field("expiresInSeconds", Json_decode.$$float, json)
                      };
              }), param);
}

function antibodies(param) {
  return Json_decode.field("records", (function (param) {
                return Json_decode.array(antibody, param);
              }), param);
}

function thumbnail(json) {
  return {
          url: Json_decode.field("url", Json_decode.string, json),
          width: Json_decode.field("width", Json_decode.$$int, json),
          height: Json_decode.field("height", Json_decode.$$int, json)
        };
}

function photo(json) {
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          url: Json_decode.field("url", Json_decode.string, json),
          size: Json_decode.field("size", Json_decode.$$int, json),
          thumbnail: Json_decode.field("thumbnails", (function (param) {
                  return Json_decode.field("large", thumbnail, param);
                }), json)
        };
}

function citizen(param) {
  return Json_decode.field("fields", (function (json) {
                return {
                        id: Json_decode.field("id", Json_decode.string, json),
                        name: Json_decode.withDefault("", (function (param) {
                                return Json_decode.field("name", Json_decode.string, param);
                              }), json),
                        infections: Json_decode.withDefault([], (function (param) {
                                return Json_decode.field("infections", (function (param) {
                                              return Json_decode.array(Json_decode.string, param);
                                            }), param);
                              }), json),
                        vaccinations: Json_decode.withDefault([], (function (param) {
                                return Json_decode.field("vaccinations", (function (param) {
                                              return Json_decode.array(Json_decode.string, param);
                                            }), param);
                              }), json),
                        immunities: Json_decode.withDefault([], (function (param) {
                                return Json_decode.field("immunities", (function (param) {
                                              return Json_decode.array(Json_decode.string, param);
                                            }), param);
                              }), json),
                        photo: Json_decode.withDefault([], (function (param) {
                                return Json_decode.field("photo", (function (param) {
                                              return Json_decode.array(photo, param);
                                            }), param);
                              }), json)
                      };
              }), param);
}

function citizens(param) {
  return Json_decode.field("records", (function (param) {
                return Json_decode.array(citizen, param);
              }), param);
}

function infection(param) {
  return Json_decode.field("fields", (function (json) {
                return {
                        pathogen: Belt_Array.getExn(Json_decode.field("pathogen", (function (param) {
                                    return Json_decode.array(Json_decode.string, param);
                                  }), json), 0),
                        infectedAt: Json_decode.field("infectedAt", Json_decode.date, json)
                      };
              }), param);
}

function vaccination(param) {
  return Json_decode.field("fields", (function (json) {
                return {
                        vaccine: Belt_Array.getExn(Json_decode.field("vaccine", (function (param) {
                                    return Json_decode.array(Json_decode.string, param);
                                  }), json), 0),
                        adminedAt: Json_decode.field("adminedAt", Json_decode.date, json)
                      };
              }), param);
}

function immunity(param) {
  return Json_decode.field("fields", (function (json) {
                return {
                        antibody: Belt_Array.getExn(Json_decode.field("antibody", (function (param) {
                                    return Json_decode.array(Json_decode.string, param);
                                  }), json), 0),
                        expiresAt: Json_decode.field("expiresAt", Json_decode.date, json)
                      };
              }), param);
}

var Decode = {
  pathogen: pathogen,
  pathogens: pathogens,
  vaccine: vaccine,
  vaccines: vaccines,
  antibody: antibody,
  antibodies: antibodies,
  thumbnail: thumbnail,
  photo: photo,
  citizen: citizen,
  citizens: citizens,
  infection: infection,
  vaccination: vaccination,
  immunity: immunity
};

function records(db, table, decoder, filter, param) {
  return fetch(table_url(db, table, filter, undefined), headers(db)).then(function (prim) {
                return prim.json();
              }).then(function (json) {
              return Promise.resolve(Curry._1(decoder, json));
            });
}

function record(db, table, record$1, decoder) {
  return fetch(record_url(db, table, record$1), headers(db)).then(function (prim) {
                return prim.json();
              }).then(function (json) {
              return Promise.resolve(Curry._1(decoder, json));
            });
}

function pathogens$1(db) {
  return records(db, "Pathogen", pathogens, undefined, undefined);
}

function pathogen_of(db, id) {
  return record(db, "Pathogen", id, pathogen);
}

function vaccines$1(db) {
  return records(db, "Vaccine", vaccines, undefined, undefined);
}

function vaccine_of(db, id) {
  return record(db, "Vaccine", id, vaccine);
}

function antibodies$1(db) {
  return records(db, "Antibody", antibodies, undefined, undefined);
}

function antibody_of(db, id) {
  return record(db, "Antibody", id, antibody);
}

function citizens$1(db, filter, param) {
  return records(db, "Citizen", citizens, filter, undefined);
}

function citizen_of(db, id) {
  return record(db, "Citizen", id, citizen);
}

function infection_of(db, id) {
  return record(db, "Infection", id, infection);
}

function vaccination_of(db, id) {
  return record(db, "Vaccination", id, vaccination);
}

function immunity_of(db, id) {
  return record(db, "Immunity", id, immunity);
}

exports.Airtable = Airtable;
exports.headers = headers;
exports.Decode = Decode;
exports.records = records;
exports.record = record;
exports.pathogens = pathogens$1;
exports.pathogen_of = pathogen_of;
exports.vaccines = vaccines$1;
exports.vaccine_of = vaccine_of;
exports.antibodies = antibodies$1;
exports.antibody_of = antibody_of;
exports.citizens = citizens$1;
exports.citizen_of = citizen_of;
exports.infection_of = infection_of;
exports.vaccination_of = vaccination_of;
exports.immunity_of = immunity_of;
/*  Not a pure module */
