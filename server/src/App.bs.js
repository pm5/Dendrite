// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("bs-platform/lib/js/curry.js");
var GraphQL = require("./GraphQL.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ApolloServer = require("./ApolloServer.bs.js");
var ApolloServer$1 = require("apollo-server");

var pathogens = [{
    id: "0",
    name: "foo",
    version: "1.0.0",
    spreadDistanceInMeters: 1.0,
    spreadTimeInSeconds: 30.0,
    spreadRatio: 0.3
  }];

function pathogen_of(id) {
  return Belt_Array.getByU(pathogens, (function (p) {
                return p.id === id;
              }));
}

var vaccines = [{
    id: "0",
    name: "fooForbid",
    version: "1.0.1",
    generates: "0",
    effectiveAfterSeconds: 600.0
  }];

function vaccine_of(id) {
  return Belt_Array.getByU(vaccines, (function (p) {
                return p.id === id;
              }));
}

var antibodies = [{
    id: "0",
    name: "antifoo",
    version: "0.8.0",
    bindsTo: ["0"],
    expiresInSeconds: 120.0
  }];

function antibody_of(id) {
  return Belt_Array.getByU(antibodies, (function (p) {
                return p.id === id;
              }));
}

var citizens = [{
    id: "0",
    infections: [{
        pathogen: "0",
        infectedAt: new Date("2020-09-01T00:00:01")
      }],
    vaccinations: [{
        vaccine: "0",
        adminedAt: new Date()
      }],
    immunities: [{
        antibody: "0",
        expiresAt: new Date("2020-10-01T00:00:01")
      }]
  }];

function citizen_of(id) {
  return Belt_Array.getByU(citizens, (function (p) {
                return p.id === id;
              }));
}

var schema = Fs.readFileSync("schema.graphql", "utf-8");

var resolvers_Query = {
  allCitizens: (function (param, param$1, param$2, param$3) {
      return citizens;
    }),
  allPathogens: (function (param, param$1, param$2, param$3) {
      return pathogens;
    }),
  allVaccines: (function (param, param$1, param$2, param$3) {
      return vaccines;
    }),
  allAntibodies: (function (param, param$1, param$2, param$3) {
      return antibodies;
    }),
  citizen: (function (param, args, param$1, param$2) {
      return Belt_Option.flatMapU(Js_dict.get(args, "id"), citizen_of);
    })
};

var resolvers_Vaccine = {
  generates: (function (o) {
      return Belt_Option.getExn(antibody_of(o.generates));
    })
};

var resolvers_Antibody = {
  bindsTo: (function (o) {
      return Belt_Array.keepMapU(o.bindsTo, pathogen_of);
    })
};

var resolvers_Infection = {
  pathogen: (function (o) {
      return Belt_Option.getExn(pathogen_of(o.pathogen));
    })
};

var resolvers_Vaccination = {
  vaccine: (function (o) {
      return Belt_Option.getExn(vaccine_of(o.vaccine));
    })
};

var resolvers_Immunity = {
  antibody: (function (o) {
      return Belt_Option.getExn(antibody_of(o.antibody));
    })
};

var resolvers_Citizen = {
  infections: (function (o) {
      return o.infections;
    }),
  vaccinations: (function (o) {
      return o.vaccinations;
    }),
  immunities: (function (o) {
      return o.immunities;
    })
};

var resolvers = {
  Query: resolvers_Query,
  Vaccine: resolvers_Vaccine,
  Antibody: resolvers_Antibody,
  Infection: resolvers_Infection,
  Vaccination: resolvers_Vaccination,
  Immunity: resolvers_Immunity,
  Citizen: resolvers_Citizen
};

var AppServer = ApolloServer.Make(GraphQL.Resolvers);

var server = Curry._5(AppServer.createApolloServer, undefined, Caml_option.some(Curry._1(ApolloServer$1.gql, schema)), resolvers, undefined, undefined);

server.listen({
        port: 8000
      }).then(function (param) {
      return Promise.resolve((console.log("http://localhost:8000/"), undefined));
    });

exports.pathogens = pathogens;
exports.pathogen_of = pathogen_of;
exports.vaccines = vaccines;
exports.vaccine_of = vaccine_of;
exports.antibodies = antibodies;
exports.antibody_of = antibody_of;
exports.citizens = citizens;
exports.citizen_of = citizen_of;
exports.schema = schema;
exports.resolvers = resolvers;
exports.AppServer = AppServer;
exports.server = server;
/* citizens Not a pure module */
