// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Db = require("./Db.bs.js");
var Fs = require("fs");
var Curry = require("bs-platform/lib/js/curry.js");
var Dotenv = require("dotenv");
var GraphQL = require("./GraphQL.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Process = require("process");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ApolloServer = require("./ApolloServer.bs.js");
var ApolloServer$1 = require("apollo-server");

Dotenv.config(undefined);

var db = Db.Airtable.make(Belt_Option.getExn(Js_dict.get(Process.env, "AIRTABLE_ENDPOINT")), Belt_Option.getExn(Js_dict.get(Process.env, "AIRTABLE_KEY")));

var schema = Fs.readFileSync("schema.graphql", "utf-8");

var resolvers_Query = {
  allCitizens: (function (param, param$1, param$2, param$3) {
      return Db.citizens(db, undefined, undefined);
    }),
  allPathogens: (function (param, param$1, param$2, param$3) {
      return Db.pathogens(db);
    }),
  allVaccines: (function (param, param$1, param$2, param$3) {
      return Db.vaccines(db);
    }),
  allAntibodies: (function (param, param$1, param$2, param$3) {
      return Db.antibodies(db);
    }),
  citizen: (function (param, args, param$1, param$2) {
      var id = Belt_Option.getExn(Js_dict.get(args, "id"));
      return Db.citizens(db, "id%3D'" + id + "'", undefined).then(function (data) {
                  return Promise.resolve(Belt_Array.getExn(data, 0));
                });
    })
};

var resolvers_Vaccine = {
  generates: (function (o) {
      return Db.antibody_of(db, o.generates);
    })
};

var resolvers_Antibody = {
  bindsTo: (function (o) {
      return Promise.all(Belt_Array.map(o.bindsTo, (function (param) {
                        return Db.pathogen_of(db, param);
                      })));
    })
};

var resolvers_Infection = {
  pathogen: (function (o) {
      return Db.pathogen_of(db, o.pathogen);
    })
};

var resolvers_Vaccination = {
  vaccine: (function (o) {
      return Db.vaccine_of(db, o.vaccine);
    })
};

var resolvers_Immunity = {
  antibody: (function (o) {
      return Db.antibody_of(db, o.antibody);
    })
};

var resolvers_Citizen = {
  infections: (function (o) {
      return Promise.all(Belt_Array.map(o.infections, (function (param) {
                        return Db.infection_of(db, param);
                      })));
    }),
  vaccinations: (function (o) {
      return Promise.all(Belt_Array.map(o.vaccinations, (function (param) {
                        return Db.vaccination_of(db, param);
                      })));
    }),
  immunities: (function (o) {
      return Promise.all(Belt_Array.map(o.immunities, (function (param) {
                        return Db.immunity_of(db, param);
                      })));
    })
};

var resolvers = {
  Query: resolvers_Query,
  Vaccine: resolvers_Vaccine,
  Antibody: resolvers_Antibody,
  Infection: resolvers_Infection,
  Vaccination: resolvers_Vaccination,
  Immunity: resolvers_Immunity,
  Citizen: resolvers_Citizen
};

var AppServer = ApolloServer.Make(GraphQL.Resolvers);

var server = Curry._5(AppServer.createApolloServer, undefined, Caml_option.some(Curry._1(ApolloServer$1.gql, schema)), resolvers, undefined, undefined);

server.listen({
        port: 80
      }).then(function (param) {
      return Promise.resolve((console.log("server start"), undefined));
    });

exports.db = db;
exports.schema = schema;
exports.resolvers = resolvers;
exports.AppServer = AppServer;
exports.server = server;
/*  Not a pure module */
